package exam2.repositiry;

import exam2.models.Sequence;

import java.io.File;
import java.util.HashMap;
import java.util.Map;

public class Repository {
    private  Map<String, Sequence> igra;
    public Repository() {
       igra = new HashMap<>();
        Sequence Lisenok = new Sequence("Лисенок", "Каждое утро Лисёнок просыпался, завтракал и шёл увидеться с Бельчонком. Это утро не было исключением. Лисёнок пришёл на\n" +
                "их обычное место встречи, но Бельчонка там не было. Лисёнок ждал, ждал, но так и не смог дождаться своего друга. \"\n" +
                "Бельчонок не пропустил еще ни одной встречи, вдруг он попал в беду.\" - подумал Лисёнок. Как поступить Лисенку?", "Вернуться домой", "Отправиться на поиски");
        igra.put(Lisenok.getName(), Lisenok);
        Sequence toHome = new Sequence("Вернуться домой", "Вернувшись домой, Лисёнок нашёл там Бельчонка. Оказалось, что Бельчонок пришёл на место встречи раньше и увидел там рой\n" +
                "злобных пчел. Он поспешил предупредить об этом Лисёнка, но они разминулись. Наконец-то друзья нашли друг друга! <b>Игра\n" +
                "завершилась успехом</b>", "", "");
        igra.put(toHome.getName(), toHome);
        Sequence goSearch = new Sequence("Отправиться на поиски", "Все лесные жители были заняты своими делами и не обращали внимания на Лисёнка и его проблему. Но вдруг кто нибудь видел\n" +
                "Бельчонка... Лисёнок не знал, что ему делать. Помогите ему.", "Попытаться разузнать о Бельчонке у лесных жителей", "Искать Бельчонка в одиночку");
        igra.put(goSearch.getName(), goSearch);
        Sequence otherAnimal = new Sequence("Попытаться разузнать о Бельчонке у лесных жителей", "Пока Лисёнок принимал решение, лесные жители разошлись кто куда. Остались только Сова и Волк. Но у Совы бывают проблемы\n" +
                "с памятью, а Волк может сильно разозлиться из-за расспросов. Кого выбрать?", "Расспросить Сову", "Расспросить Волка");
        igra.put(otherAnimal.getName(), otherAnimal);
        Sequence wolf = new Sequence("Расспросить Волка", "Волк оказался вполне дружелюбным, но помочь не смог. Лишь сказал, что маленькому лисенку не стоит бродить по лесу\n" +
                "одному. И как теперь поступить?", "Волк прав -> Вернуться домой", "Искать Бельчонка в одиночку");
        igra.put(wolf.getName(), wolf);
        Sequence alone = new Sequence("Искать Бельчонка в одиночку", "Лисёнок слишком долго плутал по лесу в поисках друга и сам не заметил, как заблудился. Теперь его самого нужно искать.\n" +
                "<b>Игра завершилась неудачей</b>", "", "");
        igra.put(alone.getName(), alone);
        Sequence sova = new Sequence("Расспросить Сову", "Сова долго не хотела говорить, но в итоге сказала, что видела испуганного Бельчонка, бежавшего вглубь леса. Все лесные\n" +
                "жители знают, что в глубине леса опасно, если Бельчонок там, ему срочно нужна помощь.", "Поверить Сове и отправиться вглубь леса", "Сове не стоит верить -> Искать Бельчонка в одиночку");
        igra.put(sova.getName(), sova);
        Sequence alongSova = new Sequence("Поверить Сове и отправиться вглубь леса", "В глубине леса Лисёнок встретил Медвежонка. Ленивый Медвежонок был готов рассказать все, что знает, если Лисёнок\n" +
                "принесёт ему мёда.", "Нет, потрачено слишком много времени, нужно идти дальше -> Искать Бельчонка в одиночку", "Нужно воспользоваться шансом и раздобыть мёд");
        igra.put(alongSova.getName(), alongSova);
        Sequence chanse = new Sequence("Нужно воспользоваться шансом и раздобыть мёд", "Лисёнок быстро нашёл мёд, но вокруг летал рой злобных пчел. Лисёнок всегда боялся пчёл, но и не найти друга он тоже\n" +
                "боялся.", "Подождать, вдруг пчёлы улетят", "Нужно попытаться выкрасть мёд немедленно");
        igra.put(chanse.getName(), chanse);
        Sequence wait = new Sequence("Подождать, вдруг пчёлы улетят", "Лисёнок подождал немного, и пчёлы разлетелись. Лисёнок без проблем набрал мёда. Вдруг он понял, что очень голоден. Что\n" +
                "же делать?", "Поесть немного и передохнуть", "Скорее отнести мёд Медвежонку");
        igra.put(wait.getName(), wait);
        Sequence moment = new Sequence("Нужно попытаться выкрасть мёд немедленно", "Это была не лучшая идея. Пчёлы покусали Лисёнка, теперь ему самому нужна помощь. <b>Игра завершилась неудачей</b>", "", "");
        igra.put(moment.getName(), moment);
        Sequence haveEat = new Sequence("Поесть немного и передохнуть", "Пока Лисёнок ел, злобные пчёлы вернулись и покусали его. Лисёнку нужна помощь, он не сможет продолжить поиски. <b>Игра\n" +
                "завершилась неудачей</b>", "", "");
        igra.put(haveEat.getName(), haveEat);
        Sequence getMed = new Sequence("Скорее отнести мёд Медвежонку", "Довольный Медвежонок рассказал Лисёнку, что очень хорошо знает семью Белок и уверен, что Бельчонок никогда не пошёл бы в\n" +
                "глубь леса. Он заверял Лисёнка, что Белки не попадают в неприятности, и что Совам нельзя верить, он также уговаривал\n" +
                "Лисёнка вернуться домой.", "Медвежонок ничего не знает, нужно продолжить поиски -> Искать Бельчонка в одиночку", "Медвежонок ничего не знает, нужно продолжить поиски -> Искать Бельчонка в одиночку");
        igra.put(getMed.getName(), getMed);
    }

    public Map<String, Sequence> getIgra() {
        return igra;
    }
}
